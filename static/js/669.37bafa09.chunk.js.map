{"version":3,"file":"static/js/669.37bafa09.chunk.js","mappings":"8SAEO,SAASA,IAMZ,OAAOC,EAAAA,EAAAA,IAAA,UALK,kDAKL,oBAHE,mCAGF,WACV,CAEM,SAASC,EAAWC,GACvB,IAAMC,EAAG,6CAAyCD,GAMlD,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASC,EAAeC,GAC3B,IACMC,EAAa,CACfC,IAAK,mCACLC,SAAUH,GAENE,EAAkBD,EAAlBC,IAAKC,EAAaF,EAAbE,SAEb,OAAOR,EAAAA,EAAAA,IAAA,UAPK,4CAOL,oBAA4BO,EAA5B,kBAAyCC,EAAzC,WACV,CAEM,SAASC,EAAeP,GAC3B,IAAMC,EAAG,6CAAyCD,EAAzC,YAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASO,EAAgBR,GAC5B,IAAMC,EAAG,6CAAyCD,EAAzC,YAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASQ,EAAcT,GAC1B,IAAMC,EAAG,6CAAyCD,EAAzC,WAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,C,6CCtDD,IAJe,kBACX,0BAAK,SAAC,KAAD,KADM,C,sLCAFS,EAASC,EAAAA,GAAAA,IAAH,+VAoBNC,EAAWD,EAAAA,GAAAA,GAAH,gE,SCuCrB,EArDgB,WACd,IAAQX,GAAYa,EAAAA,EAAAA,MAAZb,QACR,GAAkCc,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAmCF,EAAAA,EAAAA,WAAS,GAA5C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KA+BA,OA7BAC,EAAAA,EAAAA,IAAS,WAAM,wCACb,gHAE+BZ,EAAAA,EAAAA,IAAcT,GAF7C,UAEUsB,EAFV,SAGYC,EAAUD,EAAaE,KAAKC,QAAQC,MAAK,SAAAC,GAAK,MACnC,YAAfA,EAAMC,IAD4C,KAH1D,uBAQMZ,EAAaO,GACbL,GAAc,GATpB,gCAaIA,GAAc,GACdF,EAAa,CAAC,GACR,IAAIa,MAAM,gCAfpB,kCAiBIX,GAAc,GACdE,EAAS,EAAD,IACRJ,EAAa,CAAC,GACdc,QAAQC,IAAR,MApBJ,2DADa,sBAyBbb,GAAc,GAzBA,WAAD,wBA0Bbc,EACD,KAGC,+BACKf,IAAa,SAACgB,EAAA,EAAD,IACbd,IAAS,SAACP,EAAD,UAAWO,EAAMe,WACvBf,IAAQ,SAACT,EAAD,WACN,mBACIyB,MAAM,MACNC,OAAO,MACPC,IAAG,wCAAmCtB,EAAUV,KAChDiC,MAAOvB,EAAUwB,KACjBC,YAAY,IACZC,MAAM,2FACNC,iBAAe,QAIhC,C","sources":["Api/getAxios.js","components/Loader/Loader.jsx","components/Trailer/Trailer.styled.jsx","components/Trailer/Trailer.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport function getAxiosList() {\n    const url = \"https://api.themoviedb.org/3/trending/movie/day\";\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    return axios.get(`${url}?api_key=${key}&page=1`)\n};\n\nexport function getAxiosID(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getSearchFilms(searchFilms) {\n    const url = \"https://api.themoviedb.org/3/search/movie\";\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n        nameFilm: searchFilms,\n    }\n    const { key, nameFilm } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}&query=${nameFilm}&page=1`)\n};\n\nexport function getAxiosActors(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getAxiosReviews(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getAxiosVideo(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/videos`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};","import { ThreeDots } from 'react-loader-spinner'\n\nconst Loader = () => (\n    <div><ThreeDots /></div>\n)\n\nexport default Loader;","import styled from 'styled-components';\n\nexport const Player = styled.div `\n    width: 320px;\n    height: 240px;\n    margin: 0 auto;\n\n    @media screen and (min-width: 768px) {\n        width: 720px;\n        height: 405px;\n    }\n    @media screen and (min-width: 1280px) {\n        width: 848px;\n        height: 477px;\n    }\n\n    iframe {\n        width: 100%;\n        height: 100%;\n    }\n`\n\nexport const ErrorMes = styled.h2 `\n    color: red;\n    font-weight: 700;\n`","import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useMount } from 'react-use';\n\nimport { getAxiosVideo } from \"../../Api/getAxios\";\nimport Loader from '../Loader/Loader'\nimport { Player, ErrorMes } from \"./Trailer.styled\";\n\nconst Trailer = () => {\n  const { movieId } = useParams();\n  const [filmVideo, setFilmVideo] = useState({});\n  const [isLoading, setIsLoadings] = useState(false);\n  const [error, setError] = useState('');\n\n  useMount(() => {\n    async function getFilm() {\n      try {\n        const searchVideos = await getAxiosVideo(movieId)\n          const trailer = searchVideos.data.results.find(video => \n            video.type === 'Trailer'\n          )\n          \n        if (trailer) {\n          setFilmVideo(trailer)\n          setIsLoadings(false)\n          return \n        }\n          \n        setIsLoadings(false)\n        setFilmVideo({})\n        throw new Error(\"Sory, trailer isn't found :(\");\n      } catch (error) {\n        setIsLoadings(false)\n        setError(error)\n        setFilmVideo({})\n        console.log(error);\n      }\n    }\n\n    setIsLoadings(true)\n    getFilm()      \n  })\n    \n  return (\n    <section>\n        {isLoading && <Loader />}\n        {error && <ErrorMes>{error.message}</ErrorMes>}\n          {!error &&<Player>\n              <iframe\n                  width=\"640\"\n                  height=\"360\"\n                  src={`https://www.youtube.com/embed/${filmVideo.key}`}\n                  title={filmVideo.name}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen></iframe>\n          </Player>}\n    </section>\n  );\n};\n\nexport default Trailer;"],"names":["getAxiosList","axios","getAxiosID","movieId","url","getSearchFilms","searchFilms","parameters","key","nameFilm","getAxiosActors","getAxiosReviews","getAxiosVideo","Player","styled","ErrorMes","useParams","useState","filmVideo","setFilmVideo","isLoading","setIsLoadings","error","setError","useMount","searchVideos","trailer","data","results","find","video","type","Error","console","log","getFilm","Loader","message","width","height","src","title","name","frameBorder","allow","allowFullScreen"],"sourceRoot":""}