{"version":3,"file":"static/js/736.19ecd6fb.chunk.js","mappings":"8SAEO,SAASA,IAMZ,OAAOC,EAAAA,EAAAA,IAAA,UALK,kDAKL,oBAHE,mCAGF,WACV,CAEM,SAASC,EAAWC,GACvB,IAAMC,EAAG,6CAAyCD,GAMlD,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASC,EAAeC,GAC3B,IACMC,EAAa,CACfC,IAAK,mCACLC,SAAUH,GAENE,EAAkBD,EAAlBC,IAAKC,EAAaF,EAAbE,SAEb,OAAOR,EAAAA,EAAAA,IAAA,UAPK,4CAOL,oBAA4BO,EAA5B,kBAAyCC,EAAzC,WACV,CAEM,SAASC,EAAeP,GAC3B,IAAMC,EAAG,6CAAyCD,EAAzC,YAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASO,EAAgBR,GAC5B,IAAMC,EAAG,6CAAyCD,EAAzC,YAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,CAEM,SAASQ,EAAcT,GAC1B,IAAMC,EAAG,6CAAyCD,EAAzC,WAMT,OAAOF,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAJE,oCAKZ,C,0LCzDYS,EAAOC,EAAAA,GAAAA,GAAH,0tBA+BJC,EAAYD,EAAAA,GAAAA,EAAH,+DAKTE,EAAOF,EAAAA,GAAAA,EAAH,0GAOJG,EAAWH,EAAAA,GAAAA,GAAH,gE,SCYrB,EAlDa,WACX,IAAQX,GAAYe,EAAAA,EAAAA,MAAZf,QACR,GAAoCgB,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAmCF,EAAAA,EAAAA,WAAS,GAA5C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KA0BA,OAxBAC,EAAAA,EAAAA,IAAS,WAAM,wCACb,8GAE+BhB,EAAAA,EAAAA,IAAeP,GAF9C,UAI0C,KAFhCwB,EAFV,QAIqBC,KAAKC,KAAKC,OAJ/B,uBAKMT,EAAcM,EAAaC,KAAKC,MAChCN,GAAc,GANpB,gCASIA,GAAc,GACdF,EAAc,IACR,IAAIU,MAAM,sBAXpB,kCAaIR,GAAc,GACdE,EAAS,EAAD,IACRJ,EAAc,IACdW,QAAQC,IAAR,MAhBJ,2DADa,sBAqBbV,GAAc,GArBA,WAAD,wBAsBbW,EACD,KAEC,+BACGZ,IAAa,SAACa,EAAA,EAAD,IACbX,IAAS,SAACP,EAAD,UAAWO,EAAMY,UACJ,IAAtBhB,EAAWU,SAAgB,SAACjB,EAAD,UACzBO,EAAWiB,KAAI,SAACC,GAAD,OAChB,0BACGA,EAAMC,eAAgB,gBAAKC,MAAO,IAAKC,IAAG,yCAAoCH,EAAMC,cAAgBG,IAAI,MACvGJ,EAAMC,eAAgB,gBAAKC,MAAO,IAAKC,IAAK,0EAA2EC,IAAI,MAC3H,4BACE,SAAC1B,EAAD,UAAOsB,EAAMK,QACb,UAAC5B,EAAD,yBAAuBuB,EAAMM,kBAL1BN,EAAMO,GADC,QAavB,C,6CClDD,IAJe,kBACX,0BAAK,SAAC,KAAD,KADM,C","sources":["Api/getAxios.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport function getAxiosList() {\n    const url = \"https://api.themoviedb.org/3/trending/movie/day\";\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    return axios.get(`${url}?api_key=${key}&page=1`)\n};\n\nexport function getAxiosID(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getSearchFilms(searchFilms) {\n    const url = \"https://api.themoviedb.org/3/search/movie\";\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n        nameFilm: searchFilms,\n    }\n    const { key, nameFilm } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}&query=${nameFilm}&page=1`)\n};\n\nexport function getAxiosActors(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getAxiosReviews(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};\n\nexport function getAxiosVideo(movieId) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/videos`;\n    const parameters = {\n        key: '866c6d075a3e37e8cd8cfb5e85076bc4',\n    }\n    const { key } = parameters;\n    \n    return axios.get(`${url}?api_key=${key}`)\n};","import styled from 'styled-components';\n\n\nexport const List = styled.ul `\n    display: grid;\n    max-width: calc(100vw - 48px);\n    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));\n    grid-gap: 16px;\n    margin-top: 0;\n    margin-bottom: 0;\n    padding: 0;\n    list-style: none;\n    margin-left: auto;\n    margin-right: auto;\n\n    li {\n        border-radius: 2px;\n        box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n        0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n\n        img {\n            width: 100%;\n            height: 180px;\n            object-fit: cover;\n            transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n        }\n\n        div {\n            padding: 5px;\n        }\n   }\n\n`\n\nexport const Character = styled.p `\n    margin: 0;\n    font-size: 12px; \n`\n\nexport const Name = styled.p `\n   font-size: 14px;\n   font-weight: 700;\n   margin: 0;\n   margin-bottom: 5px \n`\n\nexport const ErrorMes = styled.h2 `\n    color: red;\n    font-weight: 700;\n`\n\n","import { useParams } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useMount } from 'react-use';\n\nimport { getAxiosActors } from \"../../Api/getAxios\";\nimport Loader from '../Loader/Loader'\nimport { List, Name, Character, ErrorMes } from './Cast.styled'\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [filmActors, setFilmActors] = useState([]);\n  const [isLoading, setIsLoadings] = useState(false);\n  const [error, setError] = useState('');\n\n  useMount(() => {\n    async function getFilm() {\n      try {\n        const searchActors = await getAxiosActors(movieId)\n        \n        if (searchActors.data.cast.length !== 0) {\n          setFilmActors(searchActors.data.cast)\n          setIsLoadings(false)\n          return \n         }\n        setIsLoadings(false)\n        setFilmActors([])\n        throw new Error(\"Sory, no result :(\");\n      } catch (error) {\n        setIsLoadings(false)\n        setError(error)\n        setFilmActors([])\n        console.log(error);\n      }\n    }\n\n    setIsLoadings(true)\n    getFilm()      \n  })\n  return (\n    <section>\n      {isLoading && <Loader />}\n      {error && <ErrorMes>{error.message}</ErrorMes>}\n      {filmActors.length !== 0 && <List>\n        {filmActors.map((actor) => (\n        <li key={actor.id}>\n          {actor.profile_path && <img width={100} src={`https://image.tmdb.org/t/p/w500${actor.profile_path}`} alt=\"\" />}\n          {!actor.profile_path && <img width={100} src={\"https://www.meme-arsenal.com/memes/fefac21eda463aa9a307c7cfdbea1bee.jpg\"} alt=\"\" />}\n            <div>\n              <Name>{actor.name}</Name>\n              <Character>Character: {actor.character}</Character>\n          </div>\n        </li>\n        ))}\n      </List>}\n    </section>\n  );\n};\n\nexport default Cast;\n\n\n","import { ThreeDots } from 'react-loader-spinner'\n\nconst Loader = () => (\n    <div><ThreeDots /></div>\n)\n\nexport default Loader;"],"names":["getAxiosList","axios","getAxiosID","movieId","url","getSearchFilms","searchFilms","parameters","key","nameFilm","getAxiosActors","getAxiosReviews","getAxiosVideo","List","styled","Character","Name","ErrorMes","useParams","useState","filmActors","setFilmActors","isLoading","setIsLoadings","error","setError","useMount","searchActors","data","cast","length","Error","console","log","getFilm","Loader","message","map","actor","profile_path","width","src","alt","name","character","id"],"sourceRoot":""}